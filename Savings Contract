//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/utils/Address.sol";
import "hardhat/console.sol";

contract ThriftContractSolo {
    using Address for address payable;
    mapping(address => uint) public balances;
    mapping(address => uint) public timeLocked;
    address owner;
    uint timeSaved;
    

    constructor() {
        owner = msg.sender;
    }
    ///@notice Savings would be locked for seven days
    function deposit(uint _timeLocked) external payable {
        require(msg.value > 0, "Zero deposits not allowed");
        balances[msg.sender] += msg.value;
        timeLocked[msg.sender] += _timeLocked;
        timeSaved = block.timestamp;
    }

    function withdraw(uint _amount) public {
        require(msg.sender != address(0));
        require((balances[msg.sender]) > 0, "You have zero balance");
        require((_amount * 1 ether < balances[msg.sender]), "Insufficient Balance");
        require((block.timestamp > timeSaved + timeLocked[msg.sender] * 1 days), "Savings locked for duration you specified");
        ///@dev I couldn't get a way to make the error emit duration specified



        payable(msg.sender).sendValue(_amount * 1 ether);
        balances[msg.sender] -= _amount * 1 ether;


        console.log("");
        console.log("Your current Balance: ", balances[msg.sender]);
    }
    function getBalance()  public view returns(uint){
        require(msg.sender == owner, "Only owner can see contract balance");
        return address(this).balance;
    }
}
