// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/utils/cryptography/ECDSA.sol";
import "github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/security/ReentrancyGuard.sol";

contract UniDirectionalPaymentChannel is ReentrancyGuard {
    using ECDSA for bytes32;

    address payable public sender;
    address payable public receiver;

    uint private constant DURATION = 20;
    uint public expiresAt;
    /**
    @notice input reciever's address beore deploying contract
    */
    constructor(address payable _receiver) payable {
        require(_receiver != address(0), "receiver = zero address");
        sender = payable(msg.sender);
        receiver = _receiver;
        expiresAt = block.timestamp + DURATION;
    }
    /**
    @dev use this function to get the hash of any string
    @dev sign with address of this contract to protect against replay attack on other contracts
    */
    function _getHash(uint _amount) private view returns (bytes32) {
        return keccak256(abi.encodePacked(address(this), _amount));
    }

    function getHash(uint _amount) external view returns (bytes32) {
        return _getHash(_amount);
    }
    /**
    function getEthSignedHash(bytes32 _hash) external returns (bytes32) {
        return _hash.toEthSignedMessageHash();
    }
    */
    /**
    @dev takes the hash and generates an ethereum signed message.
    */    
    function _getEthSignedHash(uint _amount) private view returns (bytes32) {
        return _getHash(_amount).toEthSignedMessageHash();
    }

    function getEthSignedHash(uint _amount) external view returns (bytes32) {
        return _getEthSignedHash(_amount);
    }

    /**
    @notice verifies the signature really belons to the claimed sender
    @dev to get signature.... Follow the steps:
    1.) Open the browser console with fn+f12
    2.) type hash = getHash returned output
    3.) type ethereum.enable().then(console.log)
    4.) type account = wallet address of metamask
    5.) type ethereum.request({method: “personal_sign”, parms: [account, hash]}).then(console.log)
    6.) Required signature is displayed in the console

    */
    
    function _verify(uint _amount, bytes memory _sig) private view returns (bool) {
        return _getEthSignedHash(_amount).recover(_sig) == sender;
    }

    function verify(uint _amount, bytes memory _sig) external view returns (bool) {
        return _verify(_amount, _sig);
    }
    /**
    Reentrancy attacks is when a function is recalled multiple times before the contract is 
    able update its state variables such as balance or a certain address balance.
    in this function it is needed to prevent a cerain receiver to call the sent function
    "sent" multiple times with the same signature so as to withdraw more than the ether that is 
    dedicated to that account before the contract is able to call the selfdestruct function
    the selftdestruct function is used to destroy a contract and transfer the remaining
     funds to the address specified while calling the function.
    */

    function close(uint _amount, bytes memory _sig) external nonReentrant {
        require(msg.sender == receiver, "!receiver");
        require(_verify(_amount, _sig), "invalid sig");

        (bool sent, ) = receiver.call{value: _amount}("");
        require(sent, "Failed to send Ether");
        selfdestruct(sender);
    }

    function cancel() external {
        require(msg.sender == sender, "!sender");
        require(block.timestamp >= expiresAt, "!expired");
        selfdestruct(sender);
    }
}
